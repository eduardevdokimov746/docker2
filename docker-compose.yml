version: '3.5'

x-ulimits: &ulimit
  ulimits:
    nproc: 65535
    nofile:
      soft: 65535
      hard: 65535

services:
  enginx:
    image: nginx:1.19-alpine
    container_name: enginx
    restart: always
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443
    volumes:
      - ${CODE_PATH}:/var/www/html
      - ${FILES_PATH}:/var/www/html/public/files
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/log:/var/log/nginx
    depends_on:
      - ephp-fpm
    networks:
      local_net:
        ipv4_address: 11.11.0.11

  ephp-fpm:
    build: .
    container_name: ephp-fpm
    restart: always
    working_dir: /var/www/html
    ports:
      - ${PHP_PORT}:9090
    volumes:
      - ${CODE_PATH}:/var/www/html
      - ./php-fpm/php.ini:/usr/local/etc/php/php.ini
    environment:
      XDEBUG_CONFIG: 'remote_host=192.168.220.1 remote_enable=1'
      PHP_IDE_CONFIG: 'serverName=Docker'
      XDEBUG_MODE: coverage
#    depends_on:
#      - eredis
    networks:
      local_net:
        ipv4_address: 11.11.0.20
#
#  roadrunner:
#    build:
#      context: .
#      dockerfile: DockerfileRR
#    container_name: roadrunner
#    restart: always
#    user: "1000:1000"
#    working_dir: /var/www/html
#    command: /bin/sh -c "rr serve -c .rr.yaml"
#    ports:
#      - 8080:8080
#      - 6001:6001
#      - 10001:10001
#    volumes:
#      - ${CODE_PATH}:/var/www/html
#      - ./php-fpm/php.ini:/usr/local/etc/php/php.ini
#    environment:
#      XDEBUG_CONFIG: 'remote_host=192.168.220.1 remote_enable=1'
#      PHP_IDE_CONFIG: 'serverName=Docker'
#      XDEBUG_MODE: coverage
#    depends_on:
#      - ekafka
#      - eredis
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.10

  epsql:
    image: bitnami/postgresql:11-debian-10
    container_name: epsql
    restart: always
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=${POSTGRESQL_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRESQL_REPLICATION_PASSWORD}
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - ${POSTGRESQL_PORT}:5432
    volumes:
      - epsql:/bitnami/postgresql
    networks:
      local_net:
        ipv4_address: 11.11.0.30

  epgadmin:
    image: dpage/pgadmin4
    container_name: epgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - ${PGADMIN_PORT}:80
    volumes:
      - epgadmin:/root/.pgadmin
    networks:
      local_net:
        ipv4_address: 11.11.0.40

#  eredis:
#    image: redis:6-alpine
#    container_name: eredis
#    restart: always
#    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
#    volumes:
#      - ./redis/redis-data:/var/lib/redis
#      - ./redis/redis:/usr/local/etc/redis
#    ports:
#      - ${REDIS_PORT}:6379
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.50
        
#  ecentrifugo:
#    container_name: ecentrifugo
#    image: centrifugo/centrifugo:v5
#    ulimits:
#      nofile:
#        soft: 65535
#        hard: 65535
#    ports:
#      - 8085:8000
#    volumes:
#      - ./centrifugo/config.json:/centrifugo/config.json
#    command: centrifugo -c config.json
#    restart: always
#    depends_on:
#      - roadrunner
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.51

#  erebbitmq:
#    image: rabbitmq:3-management-alpine
#    container_name: erebbitmq
#    restart: always
#    environment:
#      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
#      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
#    ports:
#      - ${RABBITMQ_PORT}:5672
#      - ${RABBITMQ_MANAGEMENT_PORT}:15672
#      - ${RABBITMQ_STOMP_PORT}:61613
#      - ${RABBITMQ_WEB_STOMP_PORT}:15674
#    volumes:
#      - ./rabbitmq/data:/var/lib/rabbitmq/
#      - ./rabbitmq/log:/var/log/rabbitmq
#      - ./rabbitmq/conf:/etc/rabbitmq
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.70

#  node:
#    build: ./sockets
#    restart: always
#    container_name: node
#    volumes:
#      - ${SOCKET_FILES_PATH}:/socket
#    ports:
#      - ${SOCKET_PORT}:5000
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.60

#  buggregator:
#    image: ghcr.io/buggregator/server:latest
#    container_name: buggregator
#    ports:
#      - 127.0.0.1:8010:8000
#      - 1025:1025
#      - 9912:9912
#      - 9913:9913
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.80
#
#  ezookeeper:
#    container_name: ezookeeper
#    image: bitnami/zookeeper:3.8
#    volumes:
#      - "zookeeper_data:/bitnami"
#    environment:
#      ZOO_ENABLE_AUTH: "yes"
#      ZOO_SERVER_USERS: k4fk4
#      ZOO_SERVER_PASSWORDS: k4fk4_p4ssw0rd
#      KAFKA_OPTS: -Djute.maxbuffer=500000000
#    healthcheck:
#      test: nc -z zookeeper 2181 || exit 1
#      interval: 2s
#      timeout: 5s
#      retries: 10
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.48
#  ekafka:
#    container_name: ekafka
#    hostname: "kafka.local"
#    image: bitnami/kafka:3.3.2
#    volumes:
#      - "kafka_data:/bitnami"
#    ports:
#      - "9091:9092"
#    environment:
#      BITNAMI_DEBUG: "true"
#      ALLOW_PLAINTEXT_LISTENER: "true"
#      TZ: "Europe/Moscow"
#      KAFKA_ZOOKEEPER_PROTOCOL: SASL
#      KAFKA_ZOOKEEPER_USER: k4fk4
#      KAFKA_ZOOKEEPER_PASSWORD: k4fk4_p4ssw0rd
#      KAFKA_ENABLE_KRAFT: "no"
#      KAFKA_CFG_ZOOKEEPER_CONNECT: ezookeeper:2181
#      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT
#      KAFKA_CFG_LISTENERS: INTERNAL://:9091,CLIENT://:9092
#      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka.local:9091,CLIENT://kafka.local:9092
#      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
#      KAFKA_CFG_SASL_ENABLED_MECHANISMS: PLAIN
#      KAFKA_CLIENT_USERS: user
#      KAFKA_CLIENT_PASSWORDS: 123
#      KAFKA_HEAP_OPTS: '-Xmx2g -Xms2g'
#    healthcheck:
#      test: curl -s kafka.local:9091 || result=$$?; test $$result = 52 || exit 1
#      interval: 2s
#      timeout: 5s
#      retries: 10
#    depends_on:
#      - ezookeeper
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.49
#  ekafka-ui:
#    container_name: ekafka-ui
#    image: provectuslabs/kafka-ui
#    ports:
#      - "8090:8080"
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=ekafka:9091
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=ezookeeper:2181
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.45
#  eschema-registry:
#    image: confluentinc/cp-schema-registry:7.3.0
#    hostname: kafka-registry
#    container_name: eschema-registry
#    ports:
#      - "8091:80"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'ekafka:9091'
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:80
#      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: "*"
#      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: "GET,POST,PUT,OPTIONS"
#    healthcheck:
#      test: nc -z schema-registry 80 || exit 1
#      interval: 2s
#      timeout: 5s
#      retries: 10
#    depends_on:
#      - ekafka
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.41
#  erest-proxy:
#    image: confluentinc/cp-kafka-rest:7.3.0
#    hostname: kafka-proxy
#    container_name: erest-proxy
#    ports:
#      - "8092:80"
#    environment:
#      KAFKA_REST_HOST_NAME: kafka-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS: 'ekafka:9091'
#      KAFKA_REST_LISTENERS: http://0.0.0.0:80
#      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8090
#      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: "*"
#      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: "GET,POST,PUT,OPTIONS"
#      KAFKA_REST_ACCESS_CONTROL_ALLOW_HEADERS: "origin,content-type,accept,authorization"
#    depends_on:
#      - eschema-registry
#    networks:
#      local_net:
#        ipv4_address: 11.11.0.42

volumes:
  epsql:
    driver: local
  epgadmin:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  local_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 11.11.0.0/16
